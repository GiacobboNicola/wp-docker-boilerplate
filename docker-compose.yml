name: "wp-stack"

networks:
  wp-network:
    driver: bridge

services:
  nginx:
    image: nginx:1.15.12-alpine
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./wordpress:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot/:ro
    ports:
      - 80:80
      - 443:443
    networks:
      - wp-network

  mariadb:
    image: mariadb:11.5.2
    container_name: mariadb
    volumes:
      - ./mariadb:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - SERVICE_TAGS=dev
      - SERVICE_NAME=mariadb
    restart: unless-stopped
    ports:
      - ${MYSQL_PORT:-3306}:3306
    networks:
      - wp-network

  wp-site:
    build:
      context: ./php
      dockerfile: Dockerfile
      target: site
    container_name: wp-site
    restart: unless-stopped
    volumes:
      - ./wordpress:/var/www/html
    depends_on:
      - mariadb
      - phpmyadmin
    networks:
      - wp-network

  wp-cli:
    build:
      context: ./php
      dockerfile: Dockerfile
      target: cli
    container_name: wp-cli
    restart: unless-stopped
    entrypoint: ['wp', '--allow-root']
    volumes:
      - ./wordpress:/var/www/html
    networks:
      - wp-network

  phpmyadmin:
    depends_on:
      - mariadb
    image: phpmyadmin/phpmyadmin:5.2.1
    container_name: phpmyadmin
    restart: unless-stopped
    ports:
      - 8180:80
    environment:
      PMA_HOST: mariadb
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - wp-network

  # wait for mariadb to be ready
  wait-for-it:
    image: willwill/wait-for-it
    networks:
      - wp-network

  # certbot to generate ssl certificate
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw